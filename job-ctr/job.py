import hashlib
import string
import datetime
import random
import logging
import yaml
import sys
import os
import time
import argparse
from kubernetes import client, config, utils
import kubernetes.client
from kubernetes.client.rest import ApiException

# Set logging
logging.basicConfig(stream=sys.stdout, level=logging.INFO)

# Setup K8 configs
config.load_kube_config()
configuration = client.Configuration()
api_instance = client.BatchV1Api(client.ApiClient(configuration))
core_api = client.CoreV1Api(client.ApiClient(configuration))

def kube_create_job_object(name, container_image, namespace="default", container_name="jobcontainer", env_vars={}):
    """
    Create a k8 Job Object
    Minimum definition of a job object:
    {'api_version': None, - Str
    'kind': None,     - Str
    'metadata': None, - Metada Object
    'spec': None,     -V1JobSpec
    'status': None}   - V1Job Status
    Docs: https://github.com/kubernetes-client/python/blob/master/kubernetes/docs/V1Job.md
    Docs2: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#writing-a-job-spec
    Also docs are pretty pretty bad. Best way is to ´pip install kubernetes´ and go via the autogenerated code
    And figure out the chain of objects that you need to hold a final valid object So for a job object you need:
    V1Job -> V1ObjectMeta
          -> V1JobStatus
          -> V1JobSpec -> V1PodTemplate -> V1PodTemplateSpec -> V1Container
    
    Now the tricky part, is that V1Job.spec needs a .template, but not a PodTemplateSpec, as such
    you need to build a PodTemplate, add a template field (template.template) and make sure
    template.template.spec is now the PodSpec.
    Then, the V1Job.spec needs to be a JobSpec which has a template the template.template field of the PodTemplate.
    Failure to do so will trigger an API error.
    Also Containers must be a list!
    Docs3: https://github.com/kubernetes-client/python/issues/589
    """
    # Body is the object Body
    body = client.V1Job(api_version="batch/v1", kind="Job")
    # Body needs Metadata
    # Attention: Each JOB must have a different name!
    body.metadata = client.V1ObjectMeta(namespace=namespace, name=name)
    # And a Status
    body.status = client.V1JobStatus()
     # Now we start with the Template...
    template = client.V1PodTemplate()
    template.template = client.V1PodTemplateSpec()
    # Passing Arguments in Env:
    env_list = []
    for env_name, env_value in env_vars.items():
        env_list.append( client.V1EnvVar(name=env_name, value=env_value) )
    container = client.V1Container(name=container_name, image=container_image, env=env_list)
    template.template.spec = client.V1PodSpec(containers=[container], restart_policy='Never')
    # And finaly we can create our V1JobSpec!
    body.spec = client.V1JobSpec(ttl_seconds_after_finished=600, template=template.template)
    return body

def kube_create_job(image: str, name: str, namespace='default', env_vars={}):
    # Create the job definition
    container_image = image
    name = id_generator(name)
    body = kube_create_job_object(name, container_image, env_vars=env_vars)
    try: 
        api_instance.create_namespaced_job(namespace, body, pretty=True)
        return name
    except ApiException as e:
        print("Exception when calling BatchV1Api->create_namespaced_job: %s\n" % e)
        sys.exit(1)

def id_generator(name: str):
    ts = datetime.datetime.utcnow().isoformat().replace(':', '-').replace('.', '-')
    job_id = f'{name}-{ts}-job'.lower()
    os.environ['JOB_ID'] = job_id
    return job_id

def get_pod_name(job_name: str, namespace: str) -> str:
    for _ in range(5):
        try:
            pods = core_api.list_namespaced_pod(namespace=namespace, label_selector=f'job-name={job_name}').items
        except Exception as e:
            print(e)
            time.sleep(2)

    
    if len(pods) != 1:
        print("Odd number of pods: ", pods)
        sys.exit(1)
    
    pod = pods[0]
    return pod.metadata.name

def consume_logs(pod_name: str, namespace: str):
    for _ in range(10):
        if core_api.read_namespaced_pod_status(pod_name, namespace).status.container_statuses[0].ready:
            try:
                logs = core_api.read_namespaced_pod_log(pod_name, namespace)
                print(logs)
                break
            except Exception as e:
                print(e)
                raise Exception
        else:
            time.sleep(2)



def main(image: str, name: str) -> str:
    job_name = kube_create_job(image, name)

    return job_name

if __name__=='__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument("image", type=str)
    parser.add_argument("name", type=str)
    args = parser.parse_args()
    job_id = main(image=args.image, name=args.name)
    pod_name = get_pod_name(job_id, 'default')
    print(job_id)
    print(pod_name)
    consume_logs(pod_name, 'default')